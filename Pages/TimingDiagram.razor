@page "/timing"
@inject IJSRuntime js
@inject ISnackbar Snackbar

<PageTitle>Timing Diagram Generator</PageTitle>

<h3>Timing Diagram Generator</h3>

<MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="UploadFile" MaximumFileCount="100">
    <ButtonTemplate>
        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@context">
            Upload chart JSON
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>
@if (file is not null)
{
    <MudList>
        <MudListItem Icon="@Icons.Material.Filled.AttachFile">
            @file.Name <code>@(file.Size / 1024L) KB</code>
        </MudListItem>
    </MudList>
}
<br />
<PlotlyChart style="height: 60vh; min-height: 350px" Id="chart" @bind-Config="config" @bind-Layout="layout" @bind-Data="chartData" @ref="chart" />

@code {
    private PlotlyChart chart;
    private IEnumerable<string> pinStr = Enumerable.Range(0, 16)
        .Select(x => x < 8 ? string.Format("A{0}", x) : string.Format("B{0}", x - 8));
    private IList<ITrace> chartData = new List<ITrace>();
    private IBrowserFile file;
    private Config config = new Config()
        {
            Responsive = true,
            ScrollZoom = ScrollZoomFlag.True
        };
    private Layout layout = new Layout()
        {
            Title = new Plotly.Blazor.LayoutLib.Title()
            {
                Text = "Timing Diagram"
            },
            ShowLegend = false,
            Legend = new Legend()
            {
                TraceOrder = TraceOrderFlag.Reversed
            },
            YAxis = new[] {
            new YAxis()
            {
                FixedRange = true,
                TickVals = new List<object>(),
                TickText = new List<object>()
            }
        },
            XAxis = new[] {
            new XAxis()
            {
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title()
                {
                    Text = "Time (ms)"
                }
            }
        }
        };
    private DiagramSettings settings = new DiagramSettings(1, 1, true, true);

    private async void UploadFile(IBrowserFile file)
    {
        try
        {
            this.file = file;
            await using (System.IO.Stream stream = this.file.OpenReadStream(1024 * 1024))
            {
                using StreamReader reader = new StreamReader(stream);
                Dictionary<string, (List<double> x, List<bool> y)> timings = JsonConvert.DeserializeObject<Dictionary<string, (List<double> x, List<bool> y)>>(await reader.ReadToEndAsync());
                await this.InvokeAsync(async () => await this.chart.Clear());
                for (int i = 0; i < pinStr.Count(); i++)
                {
                    this.chartData.Add(new Scatter()
                        {
                            Name = pinStr.ElementAt(i),
                            Mode = ModeFlag.Lines,
                            X = timings[this.pinStr.ElementAt(i)].x.Cast<object>().ToList(),
                            Y = timings[this.pinStr.ElementAt(i)].y.Cast<object>().ToList(),
                            Fill = FillEnum.None
                        });
                }
                this.chartData = MicrocontrollerSimulator.GetTracesFromTimingSeries(this.chartData, this.settings);
                MicrocontrollerSimulator.ExtendLegendForTimingSeries(this.chartData, this.layout, this.settings);
                await this.chart.Relayout();
                foreach (ITrace x in this.chartData)
                    await this.InvokeAsync(async () => await this.chart.AddTrace(x));
            }
        }
        catch (JsonSerializationException)
        {
            this.Snackbar.Add("Error: Check whether your uploaded JSON consists of valid timing diagram data.", Severity.Error);
        }
    }
}
