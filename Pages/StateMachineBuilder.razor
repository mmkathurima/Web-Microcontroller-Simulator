@page "/builder"
@inject IJSRuntime js
@inject ISnackbar Snackbar

<PageTitle>State Machine Builder</PageTitle>
<h3>State Machine Builder</h3>

<MudGrid>
    <MudItem>
        <MudTextField T="string" @bind-Value="smName" id="smName" Label="State Machine Name" Placeholder="State Machine"></MudTextField>
    </MudItem>
    <MudItem>
        <MudTextField T="string" @bind-Value="smAbbrev" id="smAbbrev" Label="Prefix" Placeholder="SM"></MudTextField>
    </MudItem>
    <MudItem>
        <MudNumericField T="int" @bind-Value="smPeriod" id="smPeriod" Label="Period" Min="0"></MudNumericField>
    </MudItem>
    <MudItem>
        <MudSelect T="string" @bind-Value="smType" id="smType" Label="Type" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Synchronous")" />
            <MudSelectItem Value="@("Asynchronous")" />
        </MudSelect>
    </MudItem>
    <MudItem>
        <MudCheckBox T="bool" @bind-Value="UARTEnabled" id="UARTEnabled" Label="Enable UART"></MudCheckBox>
    </MudItem>
    <MudItem class="smParent" Style="width: 100%">
        <label>Variables and functions</label>
        <div class="editor" id="editor0" style="top: 7vh"></div>
    </MudItem>
    <MudItem>
        <MudTextField T="string" @bind-Value="stateName" id="state_name_input" Label="state name..." Margin="MudBlazor.Margin.Dense"></MudTextField>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" id="add_state_btn">add state</MudButton>
    </MudItem>
    <MudItem>
        <MudTextField T="string" @bind-Value="eventName" id="event_name_input" Label="event name..."></MudTextField>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" id="start_transition_btn">Start Transition</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" id="cancel_transition_btn">Cancel</MudButton>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" id="delete_btn">delete</MudButton>
    </MudItem>
    <MudItem>
        <div class="wrap">
            <div class="select">
                <select class="select-text" id="initState"></select>
                <label class="select-label">Initial State</label>
            </div>
        </div>
    </MudItem>
    <MudItem>
        <MudTooltip Text="Generated code may consist of errors. Therefore validation of code is required." Placement="Placement.Top">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" id="gen_c" @onclick="GenerateC">Generate C Code</MudButton>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <div id="last_click_pos_container">X: 0, Y: 0</div>
        <div id="selected_state"></div>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem>
        <state-machine-editor id="smeditor" width="500" height="500"></state-machine-editor>
    </MudItem>
    <MudItem>
        <div class="flex-container">
            <div class="smParent">
                <label>Actions</label>
                <div class="editor" id="editor1"></div>
            </div>
            <div class="smParent">
                <label>Conditions</label>
                <div class="editor" id="editor2"></div>
            </div>
        </div>
    </MudItem>
</MudGrid>
<ul class="list-group list-group-horizontal" id="transitions"></ul>
<style>
    body {
        padding-bottom: 5em;
    }
</style>
@*    <script type="module" src="smb_main.js"></script>
    <script type="module" src="smb.js"></script>
*@
@code {
    private string stateName, eventName, smName = "State Machine", smAbbrev = "SM1";
    private int smPeriod = 1_000;
    private bool UARTEnabled = false;
    private string smType { get; set; } = "Synchronous";

    private async Task GenerateC()
    {
        List<Node> states = await this.js.InvokeAsync<List<Node>>("getStates");
        List<Data.StateMachine.Edge> transitions = await this.js.InvokeAsync<List<Data.StateMachine.Edge>>("getTransitions", System.Threading.CancellationToken.None);
        string editorText = await this.js.InvokeAsync<string>("getFirstEditorValue");
        string initState = await this.js.InvokeAsync<string>("getInitState");
        if (!states.Any())
        {
            this.Snackbar.Add("At least one state is required.", Severity.Error);
            return;
        }
        else if (string.IsNullOrWhiteSpace(initState))
        {
            this.Snackbar.Add("Initial state must be selected.", Severity.Error);
            return;
        }
        if (!transitions.Any())
        {
            this.Snackbar.Add("At least one transition is required.", Severity.Error);
            return;
        }
        else if (!transitions.Any(x => !string.IsNullOrWhiteSpace(x.Condition)))
        {
            this.Snackbar.Add("Empty condition in transition from state.", Severity.Error);
            return;
        }
        string output = new Generator(new Graph(this.smAbbrev, states, this.smName, Convert.ToString(this.smPeriod), transitions, transitions[0], editorText, initState)).GenerateCCode(this.smType == "Synchronous", this.UARTEnabled);
        string fileName = DateTime.Now.ToString("yyyyMMddHHmmssffff.c");
        string fullFileName = Path.Combine(Path.GetTempPath(), fileName);

        //output = new AStyleInterface().FormatSource(output, string.Empty);
        File.WriteAllText(fullFileName, output);

        ProcessStartInfo startInfo = new ProcessStartInfo()
            {
                CreateNoWindow = false,
                FileName = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location), "GC.exe"),
                WindowStyle = ProcessWindowStyle.Hidden,
                Arguments = string.Format("-file-\"{0}\" -tab-size-4 -no-tab_out- -space_if- -space_return- -stmt_break_alone- -stmt_concat_if_and_else- -stmt_concat_else_2_stmt- -no-stmt_concat_inline_class- -no-stmt_concat_switch- -stmt_brace_style_fct-2 -stmt_brace_style-2 -stmt_brace_style_class-2 -stmt_switch_style-4 -stmt_switch_eol-1 -stmt_class_indent-1 -stmt_namespace_indent- -stmt_extern_c_indent- -no-cmt_add_gc_tag- -no-cmt_add_file- -no-cmt_add_fct_def- -code_align_max_blanks-1 -pp_style-1 -pp_align_to_code", fullFileName)
            };

        using (Process process = Process.Start(startInfo))
        {
            await process.WaitForExitAsync();
        }
        output = File.ReadAllText(fullFileName);
        File.Delete(fullFileName);
        await js.InvokeVoidAsync("saveFile", fileName, output);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await js.InvokeVoidAsync("smbLoad");
    }
}
